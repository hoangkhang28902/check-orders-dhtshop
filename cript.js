
    // ======== Token Handling =========
    function saveToken() {
      const token = document.getElementById("token").value;
      if (!token) return alert("Vui l√≤ng nh·∫≠p token");
      localStorage.setItem("dht_token", token);
      checkTokenValidity(token);
    }

    function clearToken() {
      localStorage.removeItem("dht_token");
      document.getElementById("token").value = "";
      document.getElementById("token-status").textContent = "ƒê√£ x√≥a token.";
    }

    function loadSavedToken() {
      const token = localStorage.getItem("dht_token");
      if (token) {
        document.getElementById("token").value = token;
        checkTokenValidity(token);
      }
    }

    function checkTokenValidity(token) {
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const exp = payload.exp;
        const now = Math.floor(Date.now() / 1000);
        if (exp && exp < now) {
          document.getElementById("token-status").textContent = "‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n.";
        } else {
          const expDate = new Date(exp * 1000).toLocaleString();
          document.getElementById("token-status").textContent = `‚úÖ Token h·ª£p l·ªá, h·∫øt h·∫°n l√∫c: ${expDate}`;
        }
      } catch (e) {
        document.getElementById("token-status").textContent = "‚ùå Token kh√¥ng h·ª£p l·ªá.";
      }
    }

    loadSavedToken();

    // ======== SKU c·ªßa Combo, LinkCoffee, Akira =========
    const comboSkus = ["CB-2.5", "CB-5.0", "CB-15", "CB-35", "CB-75", "Cb-150", "CB-300"];
    const linkCoffeeSkus = [
      "DHT_ComTrua", "DHT_BlackCoffee", "DHT-MilkCoffee", "DHT_VietnameseWhiteCoffeeIced",
      "DHT_SaltedCream", "DHT_SaltedCreamCoffee", "DHT_CoconutPandanLatte", "DHT_PandanCoconutMilkTea",
      "DHT_LiptonIcedTea", "DHT_LycheeIcedTea", "DHT_PlumIcedTea", "DHT_PlumIced", "DHT_GuavaIcedTea",
      "DHT_StrawberryTea", "DHT_Lemonade", "DHT_PineappleJuice", "DHT_OrangeJuice", "DHT_PassionFruitJuice",
      "DHT_MixedFruitJuice", "DHT_IceYogurt", "DHT_StrawberryYogurt", "DHT_PeachYogurt"
    ];
    const akiraSkus = []; // Akira s·∫Ω l√† c√°c SKU kh√¥ng thu·ªôc Combo v√† LinkCoffee

    let validSkus = comboSkus;  // M·∫∑c ƒë·ªãnh l√† Combo

    // Function to update validSkus based on selected order type
    function updateValidSkus() {
      const orderType = document.getElementById("orderTypeDropdown").value;
      if (orderType === "combo") {
        validSkus = comboSkus;  // S·ª≠ d·ª•ng SKU c·ªßa Combo
      } else if (orderType === "linkcoffee") {
        validSkus = linkCoffeeSkus;  // S·ª≠ d·ª•ng SKU c·ªßa LinkCoffee
      } else if (orderType === "akira") {
        validSkus = akiraSkus;  // Akira kh√¥ng c√≥ SKU m·∫∑c ƒë·ªãnh, ki·ªÉm tra ngo√†i
      }
    }

    // ======== T√≠nh to√°n kho·∫£ng th·ªùi gian 24h c·ªßa m·ªôt ng√†y =========
    function getStartOfDay(dateStr) {
      const date = new Date(dateStr);
      date.setHours(0, 0, 0, 0); // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y = 00:00:00
      return date;
    }

    function getEndOfDay(dateStr) {
      const date = new Date(dateStr);
      date.setHours(23, 59, 59, 999); // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y = 23:59:59
      return date;
    }

    // ======== T√≠nh tu·∫ßn =========
    function getStartEndOfWeek(dateStr) {
      const date = new Date(dateStr);
      const dayOfWeek = date.getDay();
      const startOfWeek = new Date(date);
      startOfWeek.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1)); // T√≠nh th·ª© Hai c·ªßa tu·∫ßn

      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6); // C·ªông 6 ng√†y ƒë·ªÉ ƒë∆∞·ª£c Ch·ªß nh·∫≠t

      const formatDate = (d) => `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}`;

      return {
        start: formatDate(startOfWeek),
        end: formatDate(endOfWeek),
      };
    }

    // ======== T·∫£i ng√†y =========
    async function loadDates() {
      const token = document.getElementById("token").value;
      const dropdown = document.getElementById("dateDropdown");
      dropdown.innerHTML = "<option>ƒêang t·∫£i ng√†y...</option>";

      try {
        const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=500&status=all", {
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        });

        const json = await response.json();
        const orders = json.data?.array || [];

        const uniqueDates = [...new Set(
          orders.map(o => new Date(o.created_at).toISOString().split('T')[0])
        )];

        dropdown.innerHTML = "";
        uniqueDates.sort((a, b) => new Date(b) - new Date(a)).forEach(date => {  
          const option = document.createElement("option");
          option.value = date;
          option.textContent = date;
          dropdown.appendChild(option);
        });

      } catch (err) {
        alert("L·ªói khi t·∫£i danh s√°ch ng√†y: " + err.message);
      }
    }

    function formatDate(dateStr) {
      try {
        const date = new Date(dateStr);
        return `${date.toLocaleTimeString()} ${date.toLocaleDateString('vi-VN')}`;
      } catch {
        return dateStr;
      }
    }

    // ======== T·∫£i tu·∫ßn =========
    async function loadWeeks() {
      const token = document.getElementById("token").value;
      const dropdown = document.getElementById("weekDropdown");
      dropdown.innerHTML = "<option>ƒêang t·∫£i tu·∫ßn...</option>";

      try {
        const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=500&status=all", {
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        });

        const json = await response.json();
        const orders = json.data?.array || [];

        const uniqueWeeks = [...new Set(
          orders.map(o => {
            const { start, end } = getStartEndOfWeek(o.created_at);
            return `${start} - ${end}`;
          })
        )];

        dropdown.innerHTML = "";
        uniqueWeeks.sort((a, b) => new Date(b.split(' ')[0]) - new Date(a.split(' ')[0])).forEach(week => { 
          const option = document.createElement("option");
          option.value = week;
          option.textContent = week;
          dropdown.appendChild(option);
        });

      } catch (err) {
        alert("L·ªói khi t·∫£i danh s√°ch tu·∫ßn: " + err.message);
      }
    }

    // ======== Xu·∫•t ƒë∆°n h√†ng theo ng√†y =========
async function exportOrders() {
  const token = document.getElementById("token").value;
  const selectedDate = document.getElementById("dateDropdown").value;

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=500&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

    const headers = [
       "STT", "M√£ ƒë∆°n h√†ng","Tr·∫°ng th√°i","Lo·∫°i thanh to√°n","T·ªïng ti·ªÅn","Ng∆∞·ªùi duy·ªát","S·ªê ID", "H·ªç v√† t√™n", "Combo", "S·ªë l∆∞·ª£ng",
      "T·ªïng s·ªë combo", "LO·∫†I H√ÄNG", "S·ªê L∆Ø·ª¢NG",
      "ƒê·ªäA CH·ªà NH·∫¨N H√ÄNG", "SƒêT NH·∫¨N H√ÄNG", "GHI CH√ö",
      "Ng√†y mua h√†ng", "NG√ÄY G·ª¨I H√ÄNG"
    ];

    // L·ªçc ƒë∆°n h√†ng theo ng√†y v√† SKU
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const startOfDay = getStartOfDay(selectedDate);
        const endOfDay = getEndOfDay(selectedDate);
        return itemDate >= startOfDay && itemDate <= endOfDay;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        // N·∫øu orderType l√† Akira, l·ªçc SKU kh√¥ng thu·ªôc combo v√† linkcoffee
        if (validSkus === akiraSkus) {
          return cart.some(product => !comboSkus.includes(product.productDetail?.sku) && !linkCoffeeSkus.includes(product.productDetail?.sku));
        } else {
          return cart.some(product => validSkus.includes(product.productDetail?.sku)); // L·ªçc theo SKU Combo ho·∫∑c LinkCoffee
        }
      });

    const rows = filteredOrders.map((item, idx) => {
      const cart = JSON.parse(item.cartSnapshot || "[]");
      
      let adminData = "";
      try {
        adminData = JSON.parse(item.admin); // Gi·∫£i m√£ chu·ªói JSON trong item.admin
      } catch (e) {
        console.error("Kh√¥ng th·ªÉ gi·∫£i m√£ JSON t·ª´ admin:", e);
      }

      return [
       
        idx + 1,
        item.orderId || "", 
        item.status || "", 
        item.walletName || "",
        item.totalAmount || "",
        adminData.full_name || "",
        item.userPhone || "",
        item.userFullName || "",
        cart[0]?.unitPrice || "",
        cart[0]?.quantity || "",
        "", "", "", 
        item.orderAddress || "",
        item.orderPhone || "",
        "", 
        formatDate(item.created_at),
        ""
      ];
    });

    const csvContent = [
      headers.join(","),
      ...rows.map(r => r.map(field => `"${String(field).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const bom = '\uFEFF';
    const blob = new Blob([bom + csvContent], { type: "text/csv;charset=utf-8;" });
    const urlBlob = URL.createObjectURL(blob);

    const link = document.getElementById("downloadLink");
    const fileName = `orders_${selectedDate}.csv`;
    link.href = urlBlob;
    link.download = fileName;
    link.style.display = "inline";
    link.textContent = `üì• T·∫£i file CSV theo ng√†y: ${selectedDate}`;

  } catch (err) {
    alert("L·ªói t·∫£i ƒë∆°n h√†ng: " + err.message);
  }
}

// ======== Xu·∫•t ƒë∆°n h√†ng theo tu·∫ßn =========
async function exportOrdersByWeek() {
  const token = document.getElementById("token").value;
  const selectedWeek = document.getElementById("weekDropdown").value;

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=500&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

     const headers = [
       "STT", "M√£ ƒë∆°n h√†ng","Tr·∫°ng th√°i","Lo·∫°i thanh to√°n","T·ªïng ti·ªÅn","Ng∆∞·ªùi Duy·ªát","S·ªê ID", "H·ªç v√† t√™n", "Combo", "S·ªë l∆∞·ª£ng",
      "T·ªïng s·ªë combo", "LO·∫†I H√ÄNG", "S·ªê L∆Ø·ª¢NG",
      "ƒê·ªäA CH·ªà NH·∫¨N H√ÄNG", "SƒêT NH·∫¨N H√ÄNG", "GHI CH√ö",
      "Ng√†y mua h√†ng", "NG√ÄY G·ª¨I H√ÄNG"
    ];
    // L·ªçc ƒë∆°n h√†ng theo tu·∫ßn v√† SKU
    const filteredOrders = orders
      .filter(item => {
        const { start, end } = getStartEndOfWeek(item.created_at);
        return `${start} - ${end}` === selectedWeek;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        // N·∫øu orderType l√† Akira, l·ªçc SKU kh√¥ng thu·ªôc combo v√† linkcoffee
        if (validSkus === akiraSkus) {
          return cart.some(product => !comboSkus.includes(product.productDetail?.sku) && !linkCoffeeSkus.includes(product.productDetail?.sku));
        } else {
          return cart.some(product => validSkus.includes(product.productDetail?.sku)); // L·ªçc theo SKU Combo ho·∫∑c LinkCoffee
        }
      });

    const rows = filteredOrders.map((item, idx) => {
      const cart = JSON.parse(item.cartSnapshot || "[]");
       let adminData = "";
      try {
        adminData = JSON.parse(item.admin); // Gi·∫£i m√£ chu·ªói JSON trong item.admin
      } catch (e) {
        console.error("Kh√¥ng th·ªÉ gi·∫£i m√£ JSON t·ª´ admin:", e);
      }

      return [
       
        idx + 1,
        item.orderId || "", 
        item.status || "", 
        item.walletName || "",
        item.totalAmount || "",
        adminData.full_name || "",
        item.userPhone || "",
        item.userFullName || "",
        cart[0]?.unitPrice || "",
        cart[0]?.quantity || "",
        "", "", "", 
        item.orderAddress || "",
        item.orderPhone || "",
        "", 
        formatDate(item.created_at),
        ""
      ];
    });
    const csvContent = [
      headers.join(","),
      ...rows.map(r => r.map(field => `"${String(field).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const bom = '\uFEFF';
    const blob = new Blob([bom + csvContent], { type: "text/csv;charset=utf-8;" });
    const urlBlob = URL.createObjectURL(blob);

    const link = document.getElementById("downloadLink");
    const fileName = `orders_week_${selectedWeek.replace(' ', '_')}.csv`;
    link.href = urlBlob;
    link.download = fileName;
    link.style.display = "inline";
    link.textContent = `üì• T·∫£i file CSV theo tu·∫ßn: ${selectedWeek}`;

  } catch (err) {
    alert("L·ªói t·∫£i ƒë∆°n h√†ng: " + err.message);
  }
}
